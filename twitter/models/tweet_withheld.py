# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Literal, Optional
from pydantic import BaseModel, Field, StrictBool, constr

from pydantic import ValidationError

class TweetWithheld(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    copyright: StrictBool = Field(..., description="Indicates if the content is being withheld for on the basis of copyright infringement.")
    country_codes: List[constr(strict=True, regex=r'/^[A-Z]{2}$/')] = Field(..., description="Provides a list of countries where this content is not available.", unique_items=True)
    scope: Optional[Literal['tweet', 'user']] = Field(None, description="Indicates whether the content being withheld is the `tweet` or a `user`.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TweetWithheld:
        """Create an instance of TweetWithheld from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TweetWithheld:
        """Create an instance of TweetWithheld from a dict"""
        if type(obj) is not dict:
            return TweetWithheld.parse_obj(obj)

        return TweetWithheld.parse_obj({
            "copyright": obj.get("copyright"),
            "country_codes": obj.get("country_codes"),
            "scope": obj.get("scope")
        })


