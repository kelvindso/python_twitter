# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from twitter.models import UserEntities, UserPublicMetrics, UserWithheld
from pydantic import ValidationError

class User(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    created_at: Optional[datetime] = Field(None, description="Creation time of this User.")
    description: Optional[StrictStr] = Field(None, description="The text of this User's profile description (also known as bio), if the User provided one.")
    entities: Optional[UserEntities] = None
    id: constr(strict=True, regex=r'/^[0-9]{1,19}$/') = Field(..., description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    location: Optional[StrictStr] = Field(None, description="The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.")
    name: StrictStr = Field(..., description="The friendly name of this User, as shown on their profile.")
    pinned_tweet_id: Optional[constr(strict=True, regex=r'/^[0-9]{1,19}$/')] = Field(None, description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    profile_image_url: Optional[StrictStr] = Field(None, description="The URL to the profile image for this User.")
    protected: Optional[StrictBool] = Field(None, description="Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).")
    public_metrics: Optional[UserPublicMetrics] = None
    url: Optional[StrictStr] = Field(None, description="The URL specified in the User's profile.")
    username: constr(strict=True, regex=r'/^[A-Za-z0-9_]{1,15}$/') = Field(..., description="The Twitter handle (screen name) of this user.")
    verified: Optional[StrictBool] = Field(None, description="Indicate if this User is a verified Twitter User.")
    withheld: Optional[UserWithheld] = None

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entities
        if self.entities:
            _dict['entities'] = self.entities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_metrics
        if self.public_metrics:
            _dict['public_metrics'] = self.public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of withheld
        if self.withheld:
            _dict['withheld'] = self.withheld.to_dict()

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if type(obj) is not dict:
            return User.parse_obj(obj)

        return User.parse_obj({
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "entities": UserEntities.from_dict(obj.get("entities")),
            "id": obj.get("id"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "pinned_tweet_id": obj.get("pinned_tweet_id"),
            "profile_image_url": obj.get("profile_image_url"),
            "protected": obj.get("protected"),
            "public_metrics": UserPublicMetrics.from_dict(obj.get("public_metrics")),
            "url": obj.get("url"),
            "username": obj.get("username"),
            "verified": obj.get("verified"),
            "withheld": UserWithheld.from_dict(obj.get("withheld"))
        })


