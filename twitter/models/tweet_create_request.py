# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Literal, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from twitter.models import TweetCreateRequestGeo, TweetCreateRequestMedia, TweetCreateRequestPoll, TweetCreateRequestReply
from pydantic import ValidationError

class TweetCreateRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    direct_message_deep_link: Optional[StrictStr] = Field(None, description="Link to take the conversation from the public timeline to a private Direct Message.")
    for_super_followers_only: Optional[StrictBool] = Field(False, description="Exclusive Tweet for super followers.")
    geo: Optional[TweetCreateRequestGeo] = None
    media: Optional[TweetCreateRequestMedia] = None
    poll: Optional[TweetCreateRequestPoll] = None
    quote_tweet_id: Optional[constr(strict=True, regex=r'/^[0-9]{1,19}$/')] = Field(None, description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    reply: Optional[TweetCreateRequestReply] = None
    reply_settings: Optional[Literal['following', 'mentionedUsers']] = Field(None, description="Settings to indicate who can reply to the Tweet.")
    text: Optional[StrictStr] = Field(None, description="The content of the Tweet.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TweetCreateRequest:
        """Create an instance of TweetCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poll
        if self.poll:
            _dict['poll'] = self.poll.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply
        if self.reply:
            _dict['reply'] = self.reply.to_dict()

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TweetCreateRequest:
        """Create an instance of TweetCreateRequest from a dict"""
        if type(obj) is not dict:
            return TweetCreateRequest.parse_obj(obj)

        return TweetCreateRequest.parse_obj({
            "direct_message_deep_link": obj.get("direct_message_deep_link"),
            "for_super_followers_only": obj.get("for_super_followers_only") if obj.get("for_super_followers_only") is not None else False,
            "geo": TweetCreateRequestGeo.from_dict(obj.get("geo")),
            "media": TweetCreateRequestMedia.from_dict(obj.get("media")),
            "poll": TweetCreateRequestPoll.from_dict(obj.get("poll")),
            "quote_tweet_id": obj.get("quote_tweet_id"),
            "reply": TweetCreateRequestReply.from_dict(obj.get("reply")),
            "reply_settings": obj.get("reply_settings"),
            "text": obj.get("text")
        })


