# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, constr
from twitter.models import Geo, PlaceType
from pydantic import ValidationError

class Place(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    contained_within: Optional[List[StrictStr]] = None
    country: Optional[StrictStr] = Field(None, description="The full name of the county in which this place exists.")
    country_code: Optional[constr(strict=True, regex=r'/^[A-Z]{2}$/')] = Field(None, description="A two-letter ISO 3166-1 alpha-2 country code.")
    full_name: StrictStr = Field(..., description="The full name of this place.")
    geo: Optional[Geo] = None
    id: StrictStr = Field(..., description="The identifier for this place.")
    name: Optional[StrictStr] = Field(None, description="The human readable name of this place.")
    place_type: Optional[PlaceType] = None

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Place:
        """Create an instance of Place from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of place_type
        if self.place_type:
            _dict['place_type'] = self.place_type.to_dict()

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Place:
        """Create an instance of Place from a dict"""
        if type(obj) is not dict:
            return Place.parse_obj(obj)

        return Place.parse_obj({
            "contained_within": obj.get("contained_within"),
            "country": obj.get("country"),
            "country_code": obj.get("country_code"),
            "full_name": obj.get("full_name"),
            "geo": Geo.from_dict(obj.get("geo")),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "place_type": PlaceType.from_dict(obj.get("place_type"))
        })


