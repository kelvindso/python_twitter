# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from twitter.models import Variant, VideoAllOfNonPublicMetrics, VideoAllOfOrganicMetrics, VideoAllOfPromotedMetrics, VideoAllOfPublicMetrics
from pydantic import ValidationError

class VideoAllOf(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    duration_ms: Optional[StrictInt] = None
    non_public_metrics: Optional[VideoAllOfNonPublicMetrics] = None
    organic_metrics: Optional[VideoAllOfOrganicMetrics] = None
    preview_image_url: Optional[StrictStr] = None
    promoted_metrics: Optional[VideoAllOfPromotedMetrics] = None
    public_metrics: Optional[VideoAllOfPublicMetrics] = None
    variants: Optional[List[Variant]] = Field(None, description="An array of all available variants of the media.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VideoAllOf:
        """Create an instance of VideoAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of non_public_metrics
        if self.non_public_metrics:
            _dict['non_public_metrics'] = self.non_public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organic_metrics
        if self.organic_metrics:
            _dict['organic_metrics'] = self.organic_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promoted_metrics
        if self.promoted_metrics:
            _dict['promoted_metrics'] = self.promoted_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_metrics
        if self.public_metrics:
            _dict['public_metrics'] = self.public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item in self.variants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variants'] = _items

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VideoAllOf:
        """Create an instance of VideoAllOf from a dict"""
        if type(obj) is not dict:
            return VideoAllOf.parse_obj(obj)

        return VideoAllOf.parse_obj({
            "duration_ms": obj.get("duration_ms"),
            "non_public_metrics": VideoAllOfNonPublicMetrics.from_dict(obj.get("non_public_metrics")),
            "organic_metrics": VideoAllOfOrganicMetrics.from_dict(obj.get("organic_metrics")),
            "preview_image_url": obj.get("preview_image_url"),
            "promoted_metrics": VideoAllOfPromotedMetrics.from_dict(obj.get("promoted_metrics")),
            "public_metrics": VideoAllOfPublicMetrics.from_dict(obj.get("public_metrics")),
            "variants": [Variant.from_dict(_item) for _item in obj.get("variants")]
        })


