# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import json
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from twitter.models import UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema
from typing import Any, List
from pydantic import StrictStr, Field

USERCOMPLIANCEDATA_ONE_OF_SCHEMAS = ["UserDeleteComplianceSchema", "UserProfileModificationComplianceSchema", "UserProtectComplianceSchema", "UserScrubGeoSchema", "UserSuspendComplianceSchema", "UserUndeleteComplianceSchema", "UserUnprotectComplianceSchema", "UserUnsuspendComplianceSchema", "UserWithheldComplianceSchema"]

class UserComplianceData(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: UserProtectComplianceSchema
    __oneof_schema_1: Optional[UserProtectComplianceSchema] = None
    # data type: UserUnprotectComplianceSchema
    __oneof_schema_2: Optional[UserUnprotectComplianceSchema] = None
    # data type: UserDeleteComplianceSchema
    __oneof_schema_3: Optional[UserDeleteComplianceSchema] = None
    # data type: UserUndeleteComplianceSchema
    __oneof_schema_4: Optional[UserUndeleteComplianceSchema] = None
    # data type: UserSuspendComplianceSchema
    __oneof_schema_5: Optional[UserSuspendComplianceSchema] = None
    # data type: UserUnsuspendComplianceSchema
    __oneof_schema_6: Optional[UserUnsuspendComplianceSchema] = None
    # data type: UserWithheldComplianceSchema
    __oneof_schema_7: Optional[UserWithheldComplianceSchema] = None
    # data type: UserScrubGeoSchema
    __oneof_schema_8: Optional[UserScrubGeoSchema] = None
    # data type: UserProfileModificationComplianceSchema
    __oneof_schema_9: Optional[UserProfileModificationComplianceSchema] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(USERCOMPLIANCEDATA_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        error_messages = []
        match = 0
        # validate data type: UserProtectComplianceSchema
        if type(v) is not UserProtectComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserProtectComplianceSchema`")
        else:
            match += 1

        # validate data type: UserUnprotectComplianceSchema
        if type(v) is not UserUnprotectComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUnprotectComplianceSchema`")
        else:
            match += 1

        # validate data type: UserDeleteComplianceSchema
        if type(v) is not UserDeleteComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserDeleteComplianceSchema`")
        else:
            match += 1

        # validate data type: UserUndeleteComplianceSchema
        if type(v) is not UserUndeleteComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUndeleteComplianceSchema`")
        else:
            match += 1

        # validate data type: UserSuspendComplianceSchema
        if type(v) is not UserSuspendComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserSuspendComplianceSchema`")
        else:
            match += 1

        # validate data type: UserUnsuspendComplianceSchema
        if type(v) is not UserUnsuspendComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUnsuspendComplianceSchema`")
        else:
            match += 1

        # validate data type: UserWithheldComplianceSchema
        if type(v) is not UserWithheldComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserWithheldComplianceSchema`")
        else:
            match += 1

        # validate data type: UserScrubGeoSchema
        if type(v) is not UserScrubGeoSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserScrubGeoSchema`")
        else:
            match += 1

        # validate data type: UserProfileModificationComplianceSchema
        if type(v) is not UserProfileModificationComplianceSchema:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserProfileModificationComplianceSchema`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> UserComplianceData:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> UserComplianceData:
        """Returns the string representation of the model"""
        instance = cls()
        error_messages = []
        match = 0
        # deserialize data into UserProtectComplianceSchema
        try:
            instance.actual_instance = UserProtectComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserUnprotectComplianceSchema
        try:
            instance.actual_instance = UserUnprotectComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserDeleteComplianceSchema
        try:
            instance.actual_instance = UserDeleteComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserUndeleteComplianceSchema
        try:
            instance.actual_instance = UserUndeleteComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserSuspendComplianceSchema
        try:
            instance.actual_instance = UserSuspendComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserUnsuspendComplianceSchema
        try:
            instance.actual_instance = UserUnsuspendComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserWithheldComplianceSchema
        try:
            instance.actual_instance = UserWithheldComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserScrubGeoSchema
        try:
            instance.actual_instance = UserScrubGeoSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserProfileModificationComplianceSchema
        try:
            instance.actual_instance = UserProfileModificationComplianceSchema.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())





