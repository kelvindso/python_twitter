# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Literal, Optional
from pydantic import BaseModel, confloat
from twitter.models import Point
from pydantic import ValidationError

class Geo(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    bbox: List[confloat(strict=True, le=180, ge=-180)] = ...
    geometry: Optional[Point] = None
    properties: Dict[str, Any] = ...
    type: Literal['Feature'] = ...

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Geo:
        """Create an instance of Geo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Geo:
        """Create an instance of Geo from a dict"""
        if type(obj) is not dict:
            return Geo.parse_obj(obj)

        return Geo.parse_obj({
            "bbox": obj.get("bbox"),
            "geometry": Point.from_dict(obj.get("geometry")),
            "properties": obj.get("properties"),
            "type": obj.get("type")
        })


