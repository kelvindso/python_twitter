# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr
from twitter.models import UrlImage
from pydantic import ValidationError

class UrlFields(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    description: Optional[StrictStr] = Field(None, description="Description of the URL landing page.")
    display_url: Optional[StrictStr] = Field(None, description="The URL as displayed in the Twitter client.")
    expanded_url: Optional[StrictStr] = Field(None, description="A validly formatted URL.")
    images: Optional[List[UrlImage]] = None
    media_key: Optional[constr(strict=True, regex=r'/^([0-9]+)_([0-9]+)$/')] = Field(None, description="The Media Key identifier for this attachment.")
    status: Optional[conint(strict=True, le=599, ge=100)] = Field(None, description="HTTP Status Code.")
    title: Optional[StrictStr] = Field(None, description="Title of the page the URL points to.")
    unwound_url: Optional[StrictStr] = Field(None, description="Fully resolved url.")
    url: StrictStr = Field(..., description="A validly formatted URL.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UrlFields:
        """Create an instance of UrlFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UrlFields:
        """Create an instance of UrlFields from a dict"""
        if type(obj) is not dict:
            return UrlFields.parse_obj(obj)

        return UrlFields.parse_obj({
            "description": obj.get("description"),
            "display_url": obj.get("display_url"),
            "expanded_url": obj.get("expanded_url"),
            "images": [UrlImage.from_dict(_item) for _item in obj.get("images")],
            "media_key": obj.get("media_key"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "unwound_url": obj.get("unwound_url"),
            "url": obj.get("url")
        })


