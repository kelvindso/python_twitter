# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Literal, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr
from twitter.models import SpaceTopicsInner
from pydantic import ValidationError

class Space(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    created_at: Optional[datetime] = Field(None, description="Creation time of the Space.")
    creator_id: Optional[constr(strict=True, regex=r'/^[0-9]{1,19}$/')] = Field(None, description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    ended_at: Optional[datetime] = Field(None, description="End time of the Space.")
    host_ids: Optional[List[constr(strict=True, regex=r'/^[0-9]{1,19}$/')]] = Field(None, description="The user ids for the hosts of the Space.")
    id: constr(strict=True, regex=r'/^[a-zA-Z0-9]{1,13}$/') = Field(..., description="The unique identifier of this Space.")
    invited_user_ids: Optional[List[constr(strict=True, regex=r'/^[0-9]{1,19}$/')]] = Field(None, description="An array of user ids for people who were invited to a Space.")
    is_ticketed: Optional[StrictBool] = Field(None, description="Denotes if the Space is a ticketed Space.")
    lang: Optional[StrictStr] = Field(None, description="The language of the Space.")
    participant_count: Optional[StrictInt] = Field(None, description="The number of participants in a Space.")
    scheduled_start: Optional[datetime] = Field(None, description="A date time stamp for when a Space is scheduled to begin.")
    speaker_ids: Optional[List[constr(strict=True, regex=r'/^[0-9]{1,19}$/')]] = Field(None, description="An array of user ids for people who were speakers in a Space.")
    started_at: Optional[datetime] = Field(None, description="When the Space was started as a date string.")
    state: Literal['live', 'scheduled', 'ended'] = Field(..., description="The current state of the Space.")
    subscriber_count: Optional[StrictInt] = Field(None, description="The number of people who have either purchased a ticket or set a reminder for this Space.")
    title: Optional[StrictStr] = Field(None, description="The title of the Space.")
    topics: Optional[List[SpaceTopicsInner]] = Field(None, description="The topics of a Space, as selected by its creator.")
    updated_at: Optional[datetime] = Field(None, description="When the Space was last updated.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Space:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in topics (list)
        _items = []
        if self.topics:
            for _item in self.topics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['topics'] = _items

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Space:
        """Create an instance of Space from a dict"""
        if type(obj) is not dict:
            return Space.parse_obj(obj)

        return Space.parse_obj({
            "created_at": obj.get("created_at"),
            "creator_id": obj.get("creator_id"),
            "ended_at": obj.get("ended_at"),
            "host_ids": obj.get("host_ids"),
            "id": obj.get("id"),
            "invited_user_ids": obj.get("invited_user_ids"),
            "is_ticketed": obj.get("is_ticketed"),
            "lang": obj.get("lang"),
            "participant_count": obj.get("participant_count"),
            "scheduled_start": obj.get("scheduled_start"),
            "speaker_ids": obj.get("speaker_ids"),
            "started_at": obj.get("started_at"),
            "state": obj.get("state"),
            "subscriber_count": obj.get("subscriber_count"),
            "title": obj.get("title"),
            "topics": [SpaceTopicsInner.from_dict(_item) for _item in obj.get("topics")],
            "updated_at": obj.get("updated_at")
        })


