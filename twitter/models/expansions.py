# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel
from twitter.models import Media, Place, Poll, Topic, Tweet, User
from pydantic import ValidationError

class Expansions(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    media: Optional[List[Media]] = None
    places: Optional[List[Place]] = None
    polls: Optional[List[Poll]] = None
    topics: Optional[List[Topic]] = None
    tweets: Optional[List[Tweet]] = None
    users: Optional[List[User]] = None

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Expansions:
        """Create an instance of Expansions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item in self.media:
                if _item:
                    _items.append(_item.to_dict())
            _dict['media'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in places (list)
        _items = []
        if self.places:
            for _item in self.places:
                if _item:
                    _items.append(_item.to_dict())
            _dict['places'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in polls (list)
        _items = []
        if self.polls:
            for _item in self.polls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['polls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in topics (list)
        _items = []
        if self.topics:
            for _item in self.topics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['topics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tweets (list)
        _items = []
        if self.tweets:
            for _item in self.tweets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tweets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Expansions:
        """Create an instance of Expansions from a dict"""
        if type(obj) is not dict:
            return Expansions.parse_obj(obj)

        return Expansions.parse_obj({
            "media": [Media.from_dict(_item) for _item in obj.get("media")],
            "places": [Place.from_dict(_item) for _item in obj.get("places")],
            "polls": [Poll.from_dict(_item) for _item in obj.get("polls")],
            "topics": [Topic.from_dict(_item) for _item in obj.get("topics")],
            "tweets": [Tweet.from_dict(_item) for _item in obj.get("tweets")],
            "users": [User.from_dict(_item) for _item in obj.get("users")]
        })


