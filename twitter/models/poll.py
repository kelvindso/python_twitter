# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Literal, Optional
from pydantic import BaseModel, Field, conint, constr
from twitter.models import PollOption
from pydantic import ValidationError

class Poll(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    duration_minutes: Optional[conint(strict=True, le=10080, ge=5)] = None
    end_datetime: Optional[datetime] = None
    id: constr(strict=True, regex=r'/^[0-9]{1,19}$/') = Field(..., description="Unique identifier of this poll.")
    options: List[PollOption] = ...
    voting_status: Optional[Literal['open', 'closed']] = None

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Poll:
        """Create an instance of Poll from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item in self.options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['options'] = _items

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Poll:
        """Create an instance of Poll from a dict"""
        if type(obj) is not dict:
            return Poll.parse_obj(obj)

        return Poll.parse_obj({
            "duration_minutes": obj.get("duration_minutes"),
            "end_datetime": obj.get("end_datetime"),
            "id": obj.get("id"),
            "options": [PollOption.from_dict(_item) for _item in obj.get("options")],
            "voting_status": obj.get("voting_status")
        })


