# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, confloat, conint

from pydantic import ValidationError

class FullTextEntitiesAnnotationsInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    end: conint(strict=True, ge=0) = Field(..., description="Index (zero-based) at which position this entity ends.  The index is inclusive.")
    start: conint(strict=True, ge=0) = Field(..., description="Index (zero-based) at which position this entity starts.  The index is inclusive.")
    normalized_text: Optional[StrictStr] = Field(None, description="Text used to determine annotation.")
    probability: Optional[confloat(strict=True, le=1, ge=0)] = Field(None, description="Confidence factor for annotation type.")
    type: Optional[StrictStr] = Field(None, description="Annotation type.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FullTextEntitiesAnnotationsInner:
        """Create an instance of FullTextEntitiesAnnotationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FullTextEntitiesAnnotationsInner:
        """Create an instance of FullTextEntitiesAnnotationsInner from a dict"""
        if type(obj) is not dict:
            return FullTextEntitiesAnnotationsInner.parse_obj(obj)

        return FullTextEntitiesAnnotationsInner.parse_obj({
            "end": obj.get("end"),
            "start": obj.get("start"),
            "normalized_text": obj.get("normalized_text"),
            "probability": obj.get("probability"),
            "type": obj.get("type")
        })


