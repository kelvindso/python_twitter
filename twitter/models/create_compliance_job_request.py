# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Literal, Optional
from pydantic import BaseModel, Field, StrictBool, constr

from pydantic import ValidationError

class CreateComplianceJobRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    name: Optional[constr(strict=True, max_length=64)] = Field(None, description="User-provided name for a compliance job.")
    resumable: Optional[StrictBool] = Field(None, description="If true, this endpoint will return a pre-signed URL with resumable uploads enabled.")
    type: Literal['tweets', 'users'] = Field(..., description="Type of compliance job to list.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateComplianceJobRequest:
        """Create an instance of CreateComplianceJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateComplianceJobRequest:
        """Create an instance of CreateComplianceJobRequest from a dict"""
        if type(obj) is not dict:
            return CreateComplianceJobRequest.parse_obj(obj)

        return CreateComplianceJobRequest.parse_obj({
            "name": obj.get("name"),
            "resumable": obj.get("resumable"),
            "type": obj.get("type")
        })


