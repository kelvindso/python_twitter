# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json
import twitter.models


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr

from pydantic import ValidationError

class Media(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    height: Optional[conint(strict=True, ge=0)] = Field(None, description="The height of the media in pixels.")
    media_key: Optional[constr(strict=True, regex=r'/^([0-9]+)_([0-9]+)$/')] = Field(None, description="The Media Key identifier for this attachment.")
    type: StrictStr = ...
    width: Optional[conint(strict=True, ge=0)] = Field(None, description="The width of the media in pixels.")

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = 'type'

    # discriminator mappings
    __discriminator_value_class_map = {
        'AnimatedGif': 'AnimatedGif',
        'Photo': 'Photo',
        'Video': 'Video'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(AnimatedGif, Photo, Video, Media):
        """Create an instance of Media from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(AnimatedGif, Photo, Video, Media):
        """Create an instance of Media from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = getattr(twitter.models, object_type)
            return klass.from_dict(obj)
        else:
            raise ValueError("Media failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


