# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from twitter.models import ContextAnnotation, FullTextEntities, ReplySettings, TweetAttachments, TweetGeo, TweetNonPublicMetrics, TweetOrganicMetrics, TweetPromotedMetrics, TweetPublicMetrics, TweetReferencedTweetsInner, TweetWithheld
from pydantic import ValidationError

class Tweet(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    attachments: Optional[TweetAttachments] = None
    author_id: Optional[constr(strict=True, regex=r'/^[0-9]{1,19}$/')] = Field(None, description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    context_annotations: Optional[List[ContextAnnotation]] = None
    conversation_id: Optional[constr(strict=True, regex=r'/^[0-9]{1,19}$/')] = Field(None, description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    created_at: Optional[datetime] = Field(None, description="Creation time of the Tweet.")
    entities: Optional[FullTextEntities] = None
    geo: Optional[TweetGeo] = None
    id: constr(strict=True, regex=r'/^[0-9]{1,19}$/') = Field(..., description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    in_reply_to_user_id: Optional[constr(strict=True, regex=r'/^[0-9]{1,19}$/')] = Field(None, description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    lang: Optional[StrictStr] = Field(None, description="Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.")
    non_public_metrics: Optional[TweetNonPublicMetrics] = None
    organic_metrics: Optional[TweetOrganicMetrics] = None
    possibly_sensitive: Optional[StrictBool] = Field(None, description="Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.")
    promoted_metrics: Optional[TweetPromotedMetrics] = None
    public_metrics: Optional[TweetPublicMetrics] = None
    referenced_tweets: Optional[List[TweetReferencedTweetsInner]] = Field(None, description="A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.")
    reply_settings: Optional[ReplySettings] = None
    source: Optional[StrictStr] = Field(None, description="The name of the app the user Tweeted from.")
    text: StrictStr = Field(..., description="The content of the Tweet.")
    withheld: Optional[TweetWithheld] = None

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict())

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Tweet:
        """Create an instance of Tweet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of attachments
        if self.attachments:
            _dict['attachments'] = self.attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in context_annotations (list)
        _items = []
        if self.context_annotations:
            for _item in self.context_annotations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['context_annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of entities
        if self.entities:
            _dict['entities'] = self.entities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_public_metrics
        if self.non_public_metrics:
            _dict['non_public_metrics'] = self.non_public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organic_metrics
        if self.organic_metrics:
            _dict['organic_metrics'] = self.organic_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promoted_metrics
        if self.promoted_metrics:
            _dict['promoted_metrics'] = self.promoted_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_metrics
        if self.public_metrics:
            _dict['public_metrics'] = self.public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in referenced_tweets (list)
        _items = []
        if self.referenced_tweets:
            for _item in self.referenced_tweets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['referenced_tweets'] = _items
        # override the default output from pydantic by calling `to_dict()` of reply_settings
        if self.reply_settings:
            _dict['reply_settings'] = self.reply_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of withheld
        if self.withheld:
            _dict['withheld'] = self.withheld.to_dict()

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Tweet:
        """Create an instance of Tweet from a dict"""
        if type(obj) is not dict:
            return Tweet.parse_obj(obj)

        return Tweet.parse_obj({
            "attachments": TweetAttachments.from_dict(obj.get("attachments")),
            "author_id": obj.get("author_id"),
            "context_annotations": [ContextAnnotation.from_dict(_item) for _item in obj.get("context_annotations")],
            "conversation_id": obj.get("conversation_id"),
            "created_at": obj.get("created_at"),
            "entities": FullTextEntities.from_dict(obj.get("entities")),
            "geo": TweetGeo.from_dict(obj.get("geo")),
            "id": obj.get("id"),
            "in_reply_to_user_id": obj.get("in_reply_to_user_id"),
            "lang": obj.get("lang"),
            "non_public_metrics": TweetNonPublicMetrics.from_dict(obj.get("non_public_metrics")),
            "organic_metrics": TweetOrganicMetrics.from_dict(obj.get("organic_metrics")),
            "possibly_sensitive": obj.get("possibly_sensitive"),
            "promoted_metrics": TweetPromotedMetrics.from_dict(obj.get("promoted_metrics")),
            "public_metrics": TweetPublicMetrics.from_dict(obj.get("public_metrics")),
            "referenced_tweets": [TweetReferencedTweetsInner.from_dict(_item) for _item in obj.get("referenced_tweets")],
            "reply_settings": ReplySettings.from_dict(obj.get("reply_settings")),
            "source": obj.get("source"),
            "text": obj.get("text"),
            "withheld": TweetWithheld.from_dict(obj.get("withheld"))
        })


