# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr, conint, constr

from typing import List, Literal, Optional

from twitter import models
from twitter.models import BookmarkAddRequest, BookmarkMutationResponse, Get2UsersIdBookmarksResponse

from twitter.api_client import ApiClient
from twitter.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BookmarksApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    @validate_arguments
    def get_users_id_bookmarks(self, id : Annotated[StrictStr, Field(..., description="The ID of the authenticated source User for whom to return results.")], max_results : Annotated[Optional[conint(strict=True, ge=100, le=1)], Field(description="The maximum number of results.")] = None, pagination_token : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="This parameter is used to get the next 'page' of results.")] = None, tweet_fields : Annotated[Optional[List[Literal['attachments', 'author_id', 'context_annotations', 'conversation_id', 'created_at', 'entities', 'geo', 'id', 'in_reply_to_user_id', 'lang', 'non_public_metrics', 'organic_metrics', 'possibly_sensitive', 'promoted_metrics', 'public_metrics', 'referenced_tweets', 'reply_settings', 'source', 'text', 'withheld']]], Field(description="A comma separated list of Tweet fields to display.", unique_items=True)] = None, expansions : Annotated[Optional[List[Literal['attachments.media_keys', 'attachments.poll_ids', 'author_id', 'entities.mentions.username', 'geo.place_id', 'in_reply_to_user_id', 'referenced_tweets.id', 'referenced_tweets.id.author_id']]], Field(description="A comma separated list of fields to expand.", unique_items=True)] = None, media_fields : Annotated[Optional[List[Literal['alt_text', 'duration_ms', 'height', 'media_key', 'non_public_metrics', 'organic_metrics', 'preview_image_url', 'promoted_metrics', 'public_metrics', 'type', 'url', 'variants', 'width']]], Field(description="A comma separated list of Media fields to display.", unique_items=True)] = None, poll_fields : Annotated[Optional[List[Literal['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']]], Field(description="A comma separated list of Poll fields to display.", unique_items=True)] = None, user_fields : Annotated[Optional[List[Literal['created_at', 'description', 'entities', 'id', 'location', 'name', 'pinned_tweet_id', 'profile_image_url', 'protected', 'public_metrics', 'url', 'username', 'verified', 'withheld']]], Field(description="A comma separated list of User fields to display.", unique_items=True)] = None, place_fields : Annotated[Optional[List[Literal['contained_within', 'country', 'country_code', 'full_name', 'geo', 'id', 'name', 'place_type']]], Field(description="A comma separated list of Place fields to display.", unique_items=True)] = None, **kwargs) -> Get2UsersIdBookmarksResponse:  # noqa: E501
        """Bookmarks by User  # noqa: E501

        Returns Tweet objects that have been bookmarked by the requesting User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users_id_bookmarks(id, max_results, pagination_token, tweet_fields, expansions, media_fields, poll_fields, user_fields, place_fields, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the authenticated source User for whom to return results. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get the next 'page' of results.
        :type pagination_token: str
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Get2UsersIdBookmarksResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_users_id_bookmarks_with_http_info(id, max_results, pagination_token, tweet_fields, expansions, media_fields, poll_fields, user_fields, place_fields, **kwargs)  # noqa: E501

    @validate_arguments
    def get_users_id_bookmarks_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the authenticated source User for whom to return results.")], max_results : Annotated[Optional[conint(strict=True, ge=100, le=1)], Field(description="The maximum number of results.")] = None, pagination_token : Annotated[Optional[constr(strict=True, min_length=1)], Field(description="This parameter is used to get the next 'page' of results.")] = None, tweet_fields : Annotated[Optional[List[Literal['attachments', 'author_id', 'context_annotations', 'conversation_id', 'created_at', 'entities', 'geo', 'id', 'in_reply_to_user_id', 'lang', 'non_public_metrics', 'organic_metrics', 'possibly_sensitive', 'promoted_metrics', 'public_metrics', 'referenced_tweets', 'reply_settings', 'source', 'text', 'withheld']]], Field(description="A comma separated list of Tweet fields to display.", unique_items=True)] = None, expansions : Annotated[Optional[List[Literal['attachments.media_keys', 'attachments.poll_ids', 'author_id', 'entities.mentions.username', 'geo.place_id', 'in_reply_to_user_id', 'referenced_tweets.id', 'referenced_tweets.id.author_id']]], Field(description="A comma separated list of fields to expand.", unique_items=True)] = None, media_fields : Annotated[Optional[List[Literal['alt_text', 'duration_ms', 'height', 'media_key', 'non_public_metrics', 'organic_metrics', 'preview_image_url', 'promoted_metrics', 'public_metrics', 'type', 'url', 'variants', 'width']]], Field(description="A comma separated list of Media fields to display.", unique_items=True)] = None, poll_fields : Annotated[Optional[List[Literal['duration_minutes', 'end_datetime', 'id', 'options', 'voting_status']]], Field(description="A comma separated list of Poll fields to display.", unique_items=True)] = None, user_fields : Annotated[Optional[List[Literal['created_at', 'description', 'entities', 'id', 'location', 'name', 'pinned_tweet_id', 'profile_image_url', 'protected', 'public_metrics', 'url', 'username', 'verified', 'withheld']]], Field(description="A comma separated list of User fields to display.", unique_items=True)] = None, place_fields : Annotated[Optional[List[Literal['contained_within', 'country', 'country_code', 'full_name', 'geo', 'id', 'name', 'place_type']]], Field(description="A comma separated list of Place fields to display.", unique_items=True)] = None, **kwargs):  # noqa: E501
        """Bookmarks by User  # noqa: E501

        Returns Tweet objects that have been bookmarked by the requesting User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users_id_bookmarks_with_http_info(id, max_results, pagination_token, tweet_fields, expansions, media_fields, poll_fields, user_fields, place_fields, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the authenticated source User for whom to return results. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get the next 'page' of results.
        :type pagination_token: str
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Get2UsersIdBookmarksResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'max_results',
            'pagination_token',
            'tweet_fields',
            'expansions',
            'media_fields',
            'poll_fields',
            'user_fields',
            'place_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in local_var_params['kwargs'].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_id_bookmarks" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}
        if local_var_params['id']:
            path_params['id'] = local_var_params['id']

        query_params = []
        if local_var_params.get('max_results') is not None:  # noqa: E501
            query_params.append(('max_results', local_var_params['max_results']))
        if local_var_params.get('pagination_token') is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))
        if local_var_params.get('tweet_fields') is not None:  # noqa: E501
            query_params.append(('tweet.fields', local_var_params['tweet_fields']))
            collection_formats['tweet.fields'] = 'csv'
        if local_var_params.get('expansions') is not None:  # noqa: E501
            query_params.append(('expansions', local_var_params['expansions']))
            collection_formats['expansions'] = 'csv'
        if local_var_params.get('media_fields') is not None:  # noqa: E501
            query_params.append(('media.fields', local_var_params['media_fields']))
            collection_formats['media.fields'] = 'csv'
        if local_var_params.get('poll_fields') is not None:  # noqa: E501
            query_params.append(('poll.fields', local_var_params['poll_fields']))
            collection_formats['poll.fields'] = 'csv'
        if local_var_params.get('user_fields') is not None:  # noqa: E501
            query_params.append(('user.fields', local_var_params['user_fields']))
            collection_formats['user.fields'] = 'csv'
        if local_var_params.get('place_fields') is not None:  # noqa: E501
            query_params.append(('place.fields', local_var_params['place_fields']))
            collection_formats['place.fields'] = 'csv'

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2UserToken']  # noqa: E501

        response_types_map = {
            200: "Get2UsersIdBookmarksResponse",
        }

        return self.api_client.call_api(
            '/2/users/{id}/bookmarks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    @validate_arguments
    def post_users_id_bookmarks(self, id : Annotated[StrictStr, Field(..., description="The ID of the authenticated source User for whom to add bookmarks.")], bookmark_add_request : BookmarkAddRequest, **kwargs) -> BookmarkMutationResponse:  # noqa: E501
        """Add Tweet to Bookmarks  # noqa: E501

        Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_users_id_bookmarks(id, bookmark_add_request, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the authenticated source User for whom to add bookmarks. (required)
        :type id: str
        :param bookmark_add_request: (required)
        :type bookmark_add_request: BookmarkAddRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BookmarkMutationResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.post_users_id_bookmarks_with_http_info(id, bookmark_add_request, **kwargs)  # noqa: E501

    @validate_arguments
    def post_users_id_bookmarks_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the authenticated source User for whom to add bookmarks.")], bookmark_add_request : BookmarkAddRequest, **kwargs):  # noqa: E501
        """Add Tweet to Bookmarks  # noqa: E501

        Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_users_id_bookmarks_with_http_info(id, bookmark_add_request, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the authenticated source User for whom to add bookmarks. (required)
        :type id: str
        :param bookmark_add_request: (required)
        :type bookmark_add_request: BookmarkAddRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BookmarkMutationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'bookmark_add_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in local_var_params['kwargs'].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_users_id_bookmarks" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}
        if local_var_params['id']:
            path_params['id'] = local_var_params['id']

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if local_var_params['bookmark_add_request']:
            body_params = local_var_params['bookmark_add_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['OAuth2UserToken']  # noqa: E501

        response_types_map = {
            200: "BookmarkMutationResponse",
        }

        return self.api_client.call_api(
            '/2/users/{id}/bookmarks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    @validate_arguments
    def users_id_bookmarks_delete(self, id : Annotated[StrictStr, Field(..., description="The ID of the authenticated source User whose bookmark is to be removed.")], tweet_id : Annotated[constr(strict=True, regex=r'/^[0-9]{1,19}$/'), Field(..., description="The ID of the Tweet that the source User is removing from bookmarks.")], **kwargs) -> BookmarkMutationResponse:  # noqa: E501
        """Remove a bookmarked Tweet  # noqa: E501

        Removes a Tweet from the requesting User's bookmarked Tweets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_id_bookmarks_delete(id, tweet_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the authenticated source User whose bookmark is to be removed. (required)
        :type id: str
        :param tweet_id: The ID of the Tweet that the source User is removing from bookmarks. (required)
        :type tweet_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BookmarkMutationResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.users_id_bookmarks_delete_with_http_info(id, tweet_id, **kwargs)  # noqa: E501

    @validate_arguments
    def users_id_bookmarks_delete_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The ID of the authenticated source User whose bookmark is to be removed.")], tweet_id : Annotated[constr(strict=True, regex=r'/^[0-9]{1,19}$/'), Field(..., description="The ID of the Tweet that the source User is removing from bookmarks.")], **kwargs):  # noqa: E501
        """Remove a bookmarked Tweet  # noqa: E501

        Removes a Tweet from the requesting User's bookmarked Tweets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_id_bookmarks_delete_with_http_info(id, tweet_id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the authenticated source User whose bookmark is to be removed. (required)
        :type id: str
        :param tweet_id: The ID of the Tweet that the source User is removing from bookmarks. (required)
        :type tweet_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BookmarkMutationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'tweet_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in local_var_params['kwargs'].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_bookmarks_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}
        if local_var_params['id']:
            path_params['id'] = local_var_params['id']
        if local_var_params['tweet_id']:
            path_params['tweet_id'] = local_var_params['tweet_id']

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2UserToken']  # noqa: E501

        response_types_map = {
            200: "BookmarkMutationResponse",
        }

        return self.api_client.call_api(
            '/2/users/{id}/bookmarks/{tweet_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
