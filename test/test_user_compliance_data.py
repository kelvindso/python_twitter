# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints  # noqa: E501

    The version of the OpenAPI document: 2.49
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import twitter
from twitter.models.user_compliance_data import UserComplianceData  # noqa: E501
from twitter.rest import ApiException

class TestUserComplianceData(unittest.TestCase):
    """UserComplianceData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test UserComplianceData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = twitter.models.user_compliance_data.UserComplianceData()  # noqa: E501
        if include_optional :
            return UserComplianceData(
                user_protect = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ), 
                user_unprotect = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ), 
                user_delete = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ), 
                user_undelete = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ), 
                user_suspend = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ), 
                user_unsuspend = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ), 
                user_withheld = twitter.models.user_takedown_compliance_schema.UserTakedownComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), 
                    withheld_in_countries = [
                        'US'
                        ], ), 
                scrub_geo = twitter.models.user_scrub_geo_object_schema.UserScrubGeoObjectSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    up_to_tweet_id = '1346889436626259968', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ), 
                user_profile_modification = twitter.models.user_profile_modification_object_schema.UserProfileModificationObjectSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    new_value = '', 
                    profile_field = '', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), )
            )
        else :
            return UserComplianceData(
                user_protect = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
                user_unprotect = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
                user_delete = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
                user_undelete = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
                user_suspend = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
                user_unsuspend = twitter.models.user_compliance_schema.UserComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
                user_withheld = twitter.models.user_takedown_compliance_schema.UserTakedownComplianceSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), 
                    withheld_in_countries = [
                        'US'
                        ], ),
                scrub_geo = twitter.models.user_scrub_geo_object_schema.UserScrubGeoObjectSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    up_to_tweet_id = '1346889436626259968', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
                user_profile_modification = twitter.models.user_profile_modification_object_schema.UserProfileModificationObjectSchema(
                    event_at = '2021-07-06T18:40:40Z', 
                    new_value = '', 
                    profile_field = '', 
                    user = twitter.models.user_compliance_schema_user.UserComplianceSchema_user(
                        id = '2244994945', ), ),
        )

    def testUserComplianceData(self):
        """Test UserComplianceData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
